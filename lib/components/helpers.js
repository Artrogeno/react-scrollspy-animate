class Helpers {
  isEqualArray(a, b) {
    return a.length === b.length && a.every((item, index) => {
      return item === b[index];
    });
  }

  fillArray(array, val) {
    let newArray = [];
    for (let i = 0, max = array.length; i < max; i++) {
      newArray[i] = val;
    }
    return newArray;
  }

  throttle(fn, threshold = 100) {
    let last, timer;
    return () => {
      const now = +new Date();
      const timePassed = !!last && now < last + threshold;
      if (timePassed) {
        clearTimeout(timer);
        timer = setTimeout(() => {
          last = now;
          fn();
        }, threshold);
      } else {
        last = now;
        fn();
      }
    };
  }
}
export default new Helpers();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvY29tcG9uZW50cy9oZWxwZXJzLmpzIl0sIm5hbWVzIjpbIkhlbHBlcnMiLCJpc0VxdWFsQXJyYXkiLCJhIiwiYiIsImxlbmd0aCIsImV2ZXJ5IiwiaXRlbSIsImluZGV4IiwiZmlsbEFycmF5IiwiYXJyYXkiLCJ2YWwiLCJuZXdBcnJheSIsImkiLCJtYXgiLCJ0aHJvdHRsZSIsImZuIiwidGhyZXNob2xkIiwibGFzdCIsInRpbWVyIiwibm93IiwiRGF0ZSIsInRpbWVQYXNzZWQiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0Il0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxPQUFOLENBQWM7QUFDWkMsZUFBYUMsQ0FBYixFQUFnQkMsQ0FBaEIsRUFBbUI7QUFDakIsV0FDRUQsRUFBRUUsTUFBRixLQUFhRCxFQUFFQyxNQUFmLElBQXlCRixFQUFFRyxLQUFGLENBQVEsQ0FBQ0MsSUFBRCxFQUFPQyxLQUFQLEtBQWlCO0FBQ2hELGFBQU9ELFNBQVNILEVBQUVJLEtBQUYsQ0FBaEI7QUFDRCxLQUZ3QixDQUQzQjtBQUtEOztBQUVEQyxZQUFXQyxLQUFYLEVBQWtCQyxHQUFsQixFQUF1QjtBQUNyQixRQUFJQyxXQUFXLEVBQWY7QUFDQSxTQUFLLElBQUlDLElBQUksQ0FBUixFQUFXQyxNQUFNSixNQUFNTCxNQUE1QixFQUFvQ1EsSUFBSUMsR0FBeEMsRUFBNkNELEdBQTdDLEVBQWtEO0FBQ2hERCxlQUFTQyxDQUFULElBQWNGLEdBQWQ7QUFDRDtBQUNELFdBQU9DLFFBQVA7QUFDRDs7QUFFREcsV0FBU0MsRUFBVCxFQUFhQyxZQUFZLEdBQXpCLEVBQThCO0FBQzVCLFFBQUlDLElBQUosRUFBVUMsS0FBVjtBQUNBLFdBQU8sTUFBTTtBQUNYLFlBQU1DLE1BQU0sQ0FBQyxJQUFJQyxJQUFKLEVBQWI7QUFDQSxZQUFNQyxhQUFhLENBQUMsQ0FBQ0osSUFBRixJQUFXRSxNQUFNRixPQUFPRCxTQUEzQztBQUNBLFVBQUlLLFVBQUosRUFBZ0I7QUFDZEMscUJBQWFKLEtBQWI7QUFDQUEsZ0JBQVFLLFdBQVcsTUFBTTtBQUN2Qk4saUJBQU9FLEdBQVA7QUFDQUo7QUFDRCxTQUhPLEVBR0xDLFNBSEssQ0FBUjtBQUlELE9BTkQsTUFNTztBQUNMQyxlQUFPRSxHQUFQO0FBQ0FKO0FBQ0Q7QUFDRixLQWJEO0FBY0Q7QUFqQ1c7QUFtQ2QsZUFBZSxJQUFJZixPQUFKLEVBQWYiLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEhlbHBlcnMge1xuICBpc0VxdWFsQXJyYXkoYSwgYikge1xuICAgIHJldHVybiAoXG4gICAgICBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeSgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gPT09IGJbaW5kZXhdXG4gICAgICB9KVxuICAgIClcbiAgfVxuXG4gIGZpbGxBcnJheSAoYXJyYXksIHZhbCkge1xuICAgIGxldCBuZXdBcnJheSA9IFtdXG4gICAgZm9yIChsZXQgaSA9IDAsIG1heCA9IGFycmF5Lmxlbmd0aDsgaSA8IG1heDsgaSsrKSB7XG4gICAgICBuZXdBcnJheVtpXSA9IHZhbFxuICAgIH1cbiAgICByZXR1cm4gbmV3QXJyYXlcbiAgfVxuXG4gIHRocm90dGxlKGZuLCB0aHJlc2hvbGQgPSAxMDApIHtcbiAgICBsZXQgbGFzdCwgdGltZXJcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3Qgbm93ID0gK25ldyBEYXRlKClcbiAgICAgIGNvbnN0IHRpbWVQYXNzZWQgPSAhIWxhc3QgJiYgKG5vdyA8IGxhc3QgKyB0aHJlc2hvbGQpXG4gICAgICBpZiAodGltZVBhc3NlZCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpXG4gICAgICAgIHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgbGFzdCA9IG5vd1xuICAgICAgICAgIGZuKClcbiAgICAgICAgfSwgdGhyZXNob2xkKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGFzdCA9IG5vd1xuICAgICAgICBmbigpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5leHBvcnQgZGVmYXVsdCBuZXcgSGVscGVycygpXG4iXX0=